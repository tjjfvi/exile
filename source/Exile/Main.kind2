Code.Bool {
	"%Bool $bool @(proposition: @(p:Bool) *) @(t: proposition @p @t @f t) @(f: proposition @p @t @f f) (proposition bool)"
}
Code.Bool.true {
	"@p @t @f t"
}
Code.Unit {
	"%Unit $unit @(proposition: @(p:Unit) *) @(new: (proposition @p @new new)) (proposition unit)"
}
Code.Unit.new {
	"@p @new new"
}
Code.lam_test {
	"@(p: *) p"
}

Main {
	do IO {
		let term = Code.Unit.new
		let type = Code.Bool
	
		let type = (Exile.HSyntax.parse type)
		let term = (Exile.HSyntax.parse term)
		let result = Exile.Checker.reduce Exile.Checker.empty (Exile.Term.check term type)
		ask IO.output (Exile.CheckResult.show result)
		(IO.done Unit.new)
	}
}
