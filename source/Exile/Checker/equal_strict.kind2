Exile.Checker.equal_strict (checker: Exile.Checker) (l: Exile.Term) (r: Exile.Term): Exile.CheckResult { 
  let j = (Exile.TracebackEntry.judgement (Exile.Judgement.equal l r))
  //let l = (HVM.log (Exile.TracebackEntry.show j) l)
	(Exile.CheckResult.with_entry (Exile.Checker.equal_strict.go checker l r) j)
}

Exile.Checker.equal_strict.go (checker: Exile.Checker) (l: Exile.Term) (r: Exile.Term): Exile.CheckResult

Exile.Checker.equal_strict.go checker (Exile.Term.attach a b) (Exile.Term.attach c d) = Exile.Checker.equal_strict checker a c


Exile.Checker.equal_strict.go ch (Exile.Term.infer_lambda l.body) (Exile.Term.infer_lambda r.body) = 
  (Exile.Checker.equal_strict
    ch
    l.body
    r.body
  )
Exile.Checker.equal_strict.go ch (Exile.Term.self a l.body) (Exile.Term.self b r.body) = 
  (Exile.Checker.equal_strict
    ch
    l.body
    r.body
  )
Exile.Checker.equal_strict.go ch (Exile.Term.lambda l.sub l.type l.body) (Exile.Term.lambda r.sub r.type r.body) = 
    (Exile.CheckResult.and
      (Exile.CheckResult.and
        (Exile.CheckResult.and
          (Exile.Checker.equal_strict ch l.type r.type)
          (Exile.Checker.equal_strict ch l.sub r.sub)
        )
        (Exile.Checker.equal_strict ch (Exile.Term.infer_lambda l.body) (Exile.Term.infer_lambda r.body))
      )
      (Exile.CheckResult.ok (Exile.Term.lambda l.sub l.type l.body))
    )
      
Exile.Checker.equal_strict.go ch (Exile.Term.subtype l.instance l.type) (Exile.Term.subtype r.instance r.type) = 
  (Exile.CheckResult.and_then
    (Exile.Checker.equal_strict ch l.instance r.instance)
    term => (Exile.CheckResult.map_term (Exile.Checker.equal_strict ch l.type r.type)
      term2 => (Exile.Term.subtype term term2)))
Exile.Checker.equal_strict.go ch (Exile.Term.supertype l.instance l.type) (Exile.Term.supertype r.instance r.type) = 
  (Exile.CheckResult.and_then
    (Exile.Checker.equal_strict ch l.instance r.instance)
    term => (Exile.CheckResult.map_term (Exile.Checker.equal_strict ch l.type r.type)
      term2 => (Exile.Term.subtype term term2)))
Exile.Checker.equal_strict.go ch (Exile.Term.apply l.l l.r) (Exile.Term.apply r.l r.r) = 
  (Exile.CheckResult.and
    (Exile.Checker.equal_strict ch l.l r.l)
    (Exile.Checker.equal_strict ch l.r r.r)
  )
Exile.Checker.equal_strict.go ch (Exile.Term.recursive a l.body) (Exile.Term.recursive b r.body) = 
  (Exile.Checker.equal_strict
    ch
    (Exile.TermBody.replace l.body r.body)
    (Exile.TermBody.replace r.body l.body)
  )
  
Exile.Checker.equal_strict.go ch (Exile.Term.var l) (Exile.Term.var r) = 
  (U60.if
    (== l r)
    (Exile.CheckResult.ok (Exile.Term.var l))
    Exile.CheckResult.err
  )
Exile.Checker.equal_strict.go ch (Exile.Term.larger l) (Exile.Term.larger r) = 
  Exile.Checker.equal_strict ch l r
Exile.Checker.equal_strict.go ch (Exile.Term.smaller  l) (Exile.Term.smaller r) = 
  Exile.Checker.equal_strict ch l r
Exile.Checker.equal_strict.go ch Exile.Term.no_bound Exile.Term.no_bound  = 
  (Exile.CheckResult.ok Exile.Term.no_bound )
Exile.Checker.equal_strict.go ch (Exile.Term.bounded a b c) (Exile.Term.bounded d e f)  = 
  (Exile.CheckResult.or
    (Exile.Checker.equal_strict ch b e)
    (Exile.CheckResult.and
    (Exile.CheckResult.and
      (Exile.Checker.equal_strict ch a d)
      (Exile.Checker.equal_strict ch b e)
    )
      (Exile.Checker.equal_strict ch c f)
    )
  )
  
Exile.Checker.equal_strict.go checker l r = Exile.CheckResult.err
