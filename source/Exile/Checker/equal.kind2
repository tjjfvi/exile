Exile.Checker.equal (checker: Exile.Checker) (l: Exile.Term) (r: Exile.Term): Exile.CheckResult {
	Exile.CheckResult.with_entry (Exile.Checker.equal.go checker l r) (Exile.TracebackEntry.judgement (Exile.Judgement.equal l r))
}

Exile.Checker.equal.go (checker: Exile.Checker) (l: Exile.Term) (r: Exile.Term): Exile.CheckResult
Exile.Checker.equal.go checker Exile.Term.top Exile.Term.top = Exile.CheckResult.ok Exile.Term.top
Exile.Checker.equal.go ch (Exile.Term.infer_lambda l.body) (Exile.Term.infer_lambda r.body) = 
  let fresh_index = Exile.Util.find_free (List.concat (Exile.TermBody.get_var_set l.body) (Exile.TermBody.get_var_set r.body))
  let fresh_var = (Exile.Term.var fresh_index)
  (Exile.Checker.equal
    ch
    (Exile.TermBody.replace l.body fresh_var)
    (Exile.TermBody.replace r.body fresh_var)
  )
Exile.Checker.equal.go ch (Exile.Term.lambda l.type l.body) (Exile.Term.lambda r.type r.body) = 
    (Exile.CheckResult.and
      (Exile.CheckResult.and
        (Exile.Checker.equal ch l.type r.type)
        (Exile.Checker.equal ch (Exile.Term.infer_lambda l.body) (Exile.Term.infer_lambda r.body))
      )
      (Exile.CheckResult.ok (Exile.Term.lambda l.type l.body))
    )
      
Exile.Checker.equal.go ch (Exile.Term.check l.instance l.type) (Exile.Term.check r.instance r.type) = 
  (Exile.CheckResult.and_then
    (Exile.Checker.equal ch l.instance r.instance)
    term => (Exile.CheckResult.map_term (Exile.Checker.equal ch l.type r.type)
      term2 => (Exile.Term.check term term2)))
Exile.Checker.equal.go ch (Exile.Term.apply l.l l.r) (Exile.Term.apply r.l r.r) = 
  (Exile.CheckResult.and
    (Exile.CheckResult.and
      (Exile.Checker.equal ch l.l r.l)
      (Exile.Checker.equal ch l.r r.r)
    )
    (Exile.CheckResult.ok (Exile.Term.apply l.l l.r))
  )
  
Exile.Checker.equal.go ch (Exile.Term.var l) (Exile.Term.var r) = 
  (U60.if
    (== l r)
    (Exile.CheckResult.ok (Exile.Term.var l))
    Exile.CheckResult.err
  )
  
Exile.Checker.equal.go checker (Exile.Term.attach a b) (Exile.Term.attach c d) = Exile.Checker.equal.go checker a c
Exile.Checker.equal.go checker l r = Exile.CheckResult.err
