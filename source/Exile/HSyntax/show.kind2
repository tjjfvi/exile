Util.csi_m (n: String) { String.flatten [String.ascii_escape "[" n "m"]  }
Util.depth_to_color (depth: U60): String
Util.depth_to_color 0 = Util.csi_m "1;31"
Util.depth_to_color 1 = Util.csi_m "1;32"
Util.depth_to_color 2 = Util.csi_m "1;33"
Util.depth_to_color 3 = Util.csi_m "1;35"
Util.depth_to_color 4 = Util.csi_m "1;36"
Util.depth_to_color x = Util.csi_m "0"
State.color_string (a: State) (s: String): String { String.flatten [
	(Util.depth_to_color (State.get_depth a))
	s
	(Util.csi_m "0")
]}


// Display a term body, substituting the variable with the variable name
Util.output_body (st: State) (body: Exile.TermBody) (name: String): String {
	let x = (Exile.Term.attach (Exile.Term.var (Exile.TermBody.get_index body)) name)
	State.inc_depth st st => (Exile.HSyntax.show.go st (Exile.TermBody.get_term body))
}
Util.output_body_unnamed (st: State) (body: Exile.TermBody) {
	let name = Util.get_var_name body
	(Util.output_body st body name)
}
Util.get_var_name (body: Exile.TermBody) { String.flatten [ "x" (U60.to_string (Exile.TermBody.get_index body)) ] } 

Util.get_var_term (body: Exile.TermBody) (name: String) { (Exile.Term.attach (Exile.Term.var(Exile.TermBody.get_index body)) name) } 

Exile.HSyntax.output_bound (st: State) (sub: Exile.Term) (term: Exile.Term) (sup: Exile.Term): String
Exile.HSyntax.output_bound st Exile.Term.no_bound b Exile.Term.no_bound = String.flatten [ 
	(State.inc_depth st st => (Exile.HSyntax.show.go st b))
]
Exile.HSyntax.output_bound st Exile.Term.no_bound b c = String.flatten [ 
	(State.color_string st "(")
	(State.inc_depth st st => Exile.HSyntax.show.go st b)
	(State.color_string st " < ") 
	(State.inc_depth st st => Exile.HSyntax.show.go st c)
	(State.color_string st ")")
]
Exile.HSyntax.output_bound st a b Exile.Term.no_bound = String.flatten [ 
	(State.color_string st "(")
	(State.inc_depth st st => Exile.HSyntax.show.go st a)
	(State.color_string st " < ")
	(State.inc_depth st st => Exile.HSyntax.show.go st b)
	(State.color_string st ")")
]
Exile.HSyntax.output_bound st a b c = String.flatten [ 
	(State.color_string st "(")
	(State.inc_depth st st => Exile.HSyntax.show.go st a)
	(State.color_string st " < ")
	(State.inc_depth st st => Exile.HSyntax.show.go st b)
	(State.color_string st " < ") 
	(State.inc_depth st st => Exile.HSyntax.show.go st c)
	(State.color_string st ")")
]

Exile.HSyntax.output_with_name (st: State) (term: Exile.Term) (name: String): String
Exile.HSyntax.output_with_name st (Exile.Term.lambda type sup_type body) name = 
	let type_s = (Exile.HSyntax.show.go (State.inc_depth st st => st) type)
	String.flatten [ (State.color_string st "λ") (Exile.HSyntax.output_bound st type (Util.get_var_term body name) sup_type) " " (Util.output_body st body name) ]
Exile.HSyntax.output_with_name st (Exile.Term.infer_lambda body) name = 
	String.flatten [ (State.color_string st "λ") name " " (Util.output_body st body name) ]
Exile.HSyntax.output_with_name st (Exile.Term.recursive lt body) name = 
	String.flatten [ (State.color_string st "µ") (Exile.HSyntax.output_bound st Exile.Term.no_bound (Util.get_var_term body name) lt)  " " (Util.output_body st body name) ]
Exile.HSyntax.output_with_name st (Exile.Term.self gt body) name = 
	String.flatten [ (State.color_string st "ξ") (Exile.HSyntax.output_bound st gt (Util.get_var_term body name) Exile.Term.no_bound)  " " (Util.output_body st body name) ]
Exile.HSyntax.output_with_name st x name = String.flatten ["'"  (Exile.HSyntax.show.go st x)]

State { U60 }
State.get_depth (a: State): U60 { a } 
State.set_depth (a: State) (depth: U60): State { depth }
State.inc_depth <t> (a: State) (cont: State -> t): t {
	let depth = State.get_depth a
	let depth = (+ depth 1)
	let a = State.set_depth a depth
	(cont a)
}
State.empty { 0 }

Exile.HSyntax.show (term: Exile.Term) {
	Exile.HSyntax.show.go State.empty term
}
Exile.HSyntax.show.go (st: State) (term: Exile.Term): String
Exile.HSyntax.show.go st (Exile.Term.attach String (Exile.Term.var a) s) = String.flatten [s]
// Exile.HSyntax.show.go st (Exile.Term.attach String (Exile.Term.var a) s) = String.flatten [s "x" (U60.to_string a)]
Exile.HSyntax.show.go st (Exile.Term.attach String Exile.Term.unbound name) = String.flatten [
	"?" name "?"
]
Exile.HSyntax.show.go st (Exile.Term.attach String term name) = (Exile.HSyntax.output_with_name st term name)
Exile.HSyntax.show.go st (Exile.Term.lambda sub type body) = Exile.HSyntax.output_with_name st (Exile.Term.lambda sub type body) (Util.get_var_name body)
Exile.HSyntax.show.go st (Exile.Term.infer_lambda body) = Exile.HSyntax.output_with_name st (Exile.Term.infer_lambda body) (Util.get_var_name body)
Exile.HSyntax.show.go st (Exile.Term.self type body) = Exile.HSyntax.output_with_name st (Exile.Term.self type body) (Util.get_var_name body)
Exile.HSyntax.show.go st (Exile.Term.recursive type  body) = Exile.HSyntax.output_with_name st (Exile.Term.recursive type body) (Util.get_var_name body)
Exile.HSyntax.show.go st Exile.Term.error = "! (Err)"
Exile.HSyntax.show.go st (Exile.Term.apply a b) = String.flatten [
	(State.color_string st "A(")
	(State.inc_depth st st => (Exile.HSyntax.show.go st a))
	(State.color_string st " to ")
	(State.inc_depth st st => (Exile.HSyntax.show.go st b))
	(State.color_string st ")")
]
Exile.HSyntax.show.go st (Exile.Term.var uid) = String.flatten [
	"any" (U60.to_string uid)
]
Exile.HSyntax.show.go st (Exile.Term.subtype sub sup) = String.flatten [
	(State.color_string st "(")
	(State.inc_depth st st => (Exile.HSyntax.show.go st sub))
	(State.color_string st " < ")
	(State.inc_depth st st => (Exile.HSyntax.show.go st sup))
	(State.color_string st ")") 
]
Exile.HSyntax.show.go st (Exile.Term.supertype sup sub) = String.flatten [
	(State.color_string st "(")
	(State.inc_depth st st => (Exile.HSyntax.show.go st sup))
	(State.color_string st " > ")
	(State.inc_depth st st => (Exile.HSyntax.show.go st sub))
	(State.color_string st ")") 
]
Exile.HSyntax.show.go st (Exile.Term.bounded sub term sup) = String.flatten [
	(Exile.HSyntax.output_bound st sub term sup)
]
Exile.HSyntax.show.go st (Exile.Term.larger term) = String.flatten [
	(Exile.HSyntax.show.go st term) (State.color_string st "⁺")
]
Exile.HSyntax.show.go st (Exile.Term.smaller term) = String.flatten [
	(Exile.HSyntax.show.go st term) (State.color_string st "⁻")
]
Exile.HSyntax.show.go st (Exile.Term.attach t v meta) = String.flatten [
	(Exile.HSyntax.show.go st v)
]
Exile.HSyntax.show.go st Exile.Term.unbound = "<unbound>"
Exile.HSyntax.show.go st Exile.Term.no_bound = "<no bound>"

Exile.HSyntax.show.go st x = (HVM.log (Pair.new "cant show" x) "???")
