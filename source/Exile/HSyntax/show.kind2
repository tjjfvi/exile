// Display a term body, substituting the variable with the variable name
Util.output_body (body: Exile.TermBody) (name: String): String {
	let x = (Exile.Term.attach (Exile.Term.var (Exile.TermBody.get_index body)) name)
	(Exile.HSyntax.show (Exile.TermBody.get_term body))
}
Util.output_body_unnamed (body: Exile.TermBody) {
	let name = Util.get_var_name body
	(Util.output_body body name)
}
Util.get_var_name (body: Exile.TermBody) { String.flatten [ "x" (U60.to_string (Exile.TermBody.get_index body)) ] } 

Exile.HSyntax.output_with_name (term: Exile.Term) (name: String): String
Exile.HSyntax.output_with_name (Exile.Term.lambda type body) name = 
	let type_s = (Exile.HSyntax.show type)
	String.flatten [ "λ(" name (Util.get_var_name body) ": " type_s ") " (Util.output_body body name) ]
Exile.HSyntax.output_with_name (Exile.Term.infer_lambda body) name = 
	String.flatten [ "λ" name  (Util.get_var_name body) " " (Util.output_body body name) ]
Exile.HSyntax.output_with_name (Exile.Term.recursive body) name = 
	String.flatten [ "µ" name  (Util.get_var_name body) " " (Util.output_body body name) ]
Exile.HSyntax.output_with_name (Exile.Term.self body) name = 
	String.flatten [ "ξ" name  (Util.get_var_name body) " " (Util.output_body body name) ]
Exile.HSyntax.output_with_name x name = Exile.HSyntax.show x

Exile.HSyntax.show (term: Exile.Term): String
Exile.HSyntax.show (Exile.Term.attach String (Exile.Term.var a) s) = String.flatten [s "x" (U60.to_string a)]
Exile.HSyntax.show (Exile.Term.attach String Exile.Term.unbound name) = String.flatten [
	"?" name "?"
]
Exile.HSyntax.show (Exile.Term.attach String term name) = (Exile.HSyntax.output_with_name term name)
Exile.HSyntax.show (Exile.Term.lambda type body) = Exile.HSyntax.output_with_name (Exile.Term.lambda type body) (Util.get_var_name body)
Exile.HSyntax.show (Exile.Term.infer_lambda body) = Exile.HSyntax.output_with_name (Exile.Term.infer_lambda body) (Util.get_var_name body)
Exile.HSyntax.show (Exile.Term.self body) = Exile.HSyntax.output_with_name (Exile.Term.self body) (Util.get_var_name body)
Exile.HSyntax.show (Exile.Term.recursive body) = Exile.HSyntax.output_with_name (Exile.Term.recursive body) (Util.get_var_name body)
Exile.HSyntax.show Exile.Term.top = "*"
Exile.HSyntax.show Exile.Term.error = "!"
Exile.HSyntax.show (Exile.Term.apply a b) = String.flatten [
	"("
	(Exile.HSyntax.show a)
	" "
	(Exile.HSyntax.show b)
	")"
]
Exile.HSyntax.show (Exile.Term.var uid) = String.flatten [
	"any" (U60.to_string uid)
]
Exile.HSyntax.show (Exile.Term.subtype term type) = String.flatten [
	"(" (Exile.HSyntax.show term) " <= " (Exile.HSyntax.show type) ")" 
]
Exile.HSyntax.show (Exile.Term.supertype sup sub) = String.flatten [
	"(" (Exile.HSyntax.show sup) " >= " (Exile.HSyntax.show sub) ")"
]
Exile.HSyntax.show (Exile.Term.typeof term) = String.flatten [
	"typeof " (Exile.HSyntax.show term)
]
Exile.HSyntax.show (Exile.Term.attach t v meta) = String.flatten [
	(Exile.HSyntax.show v)
]
Exile.HSyntax.show Exile.Term.unbound = "<unbound>"

Exile.HSyntax.show x = (HVM.log x "???")
