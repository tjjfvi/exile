

Exile.HSyntax.parse.term.variable (table: Exile.DepthTable) {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask name = Exile.parse_name
    return (Bool.if (String.equal name "*")
      Exile.Term.top
      (Bool.if (String.equal name "!")
        Exile.Term.bot
        (Exile.Term.attach (Maybe.default (Maybe.map (x => (Exile.Term.var (- (Nat.to_u60 (List.length table)) x))) (Exile.DepthTable.get table name)) Exile.Term.unbound) name)
    ))
  }
}
Exile.HSyntax.parse.term.apply (table: Exile.DepthTable) {
  do Parser {
    ask t1 = Exile.HSyntax.parse.term table
    ask t2 = Exile.HSyntax.parse.term_noparen table
    return (Exile.Term.apply t1 t2)
  }
}

Util.get_name (term: Exile.Term): String
Util.get_name (Exile.Term.attach String (Exile.Term.var a) b) = b
Util.get_name (Exile.Term.attach String Exile.Term.unbound b) = b
Util.get_name (Exile.Term.var a) = String.flatten ["x" (U60.to_string a)]
Util.get_name x = (HVM.log x (String.flatten []))

Exile.HSyntax.parse.term.container (table: Exile.DepthTable) (chars: List U60) (build: String -> Exile.Term -> Exile.Term -> Exile.Term -> Exile.Term -> Exile.Term): Parser Exile.Term {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.first_of (List.map chars (char => Parser.char char))
    ask _ = Parser.skip_whitespace
    ask bound = (Exile.HSyntax.parse.term.bound table)
    let var_name = (Util.get_name (Pair.fst (Pair.snd bound)))
    ask body = Exile.HSyntax.parse.term (Exile.DepthTable.set table var_name)
    return (build var_name body (Pair.fst bound) (Pair.fst (Pair.snd bound)) (Pair.snd (Pair.snd bound)))
  }
}



Exile.HSyntax.parse.term.bound (table: Exile.DepthTable): Parser (Pair Exile.Term (Pair Exile.Term Exile.Term) ) {
  let parse_lt = Parser.first_of (List.map ['<', ':'] (char => Parser.char char))
  Parser.first_of [
    do Parser {
      ask a = Parser.char '('
      ask t = Parser.first_of [
        do Parser {
          ask sub = (Exile.HSyntax.parse.term_noparen table)
          ask _ = parse_lt
          ask term = (Exile.HSyntax.parse.term table)
          ask _ = parse_lt
          ask sup = (Exile.HSyntax.parse.term_noparen table)
          return (Pair.new sub (Pair.new term sup))
        }
        do Parser {
          ask term = (Exile.HSyntax.parse.term table)
          ask _ = parse_lt
          ask sup = (Exile.HSyntax.parse.term_noparen table)
          return (Pair.new Exile.Term.no_bound (Pair.new term sup))
        }
        do Parser {
          ask sub = (Exile.HSyntax.parse.term table)
          ask _ = parse_lt
          ask term = (Exile.HSyntax.parse.term table)
          return (Pair.new sub (Pair.new term Exile.Term.no_bound))
        }
      ]
      ask a = Parser.char ')'
      return t
    }
    do Parser {
      ask term = (Exile.HSyntax.parse.term table)
      return (Pair.new Exile.Term.no_bound (Pair.new term Exile.Term.no_bound))
    }
  ]
}

Exile.HSyntax.parse.term.typed_lambda (table: Exile.DepthTable): Parser Exile.Term {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.first_of (List.map ['@', 'λ'] (char => Parser.char char))
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char '('
    ask _ = Parser.skip_whitespace
    ask var_name = Parser.first_of [
    	Exile.parse_name
    	(Parser.pure "")
    ]
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char ':'
    ask type = Exile.HSyntax.parse.term_noparen table
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char ')'
    ask body = Exile.HSyntax.parse.term (Exile.DepthTable.set table var_name)
    return (Exile.Term.attach (Exile.Term.lambda Exile.Term.no_bound type body) var_name)
  }
}
Exile.HSyntax.parse.term.top (table: Exile.DepthTable): Parser Exile.Term {
  do Parser {
	ask _ = Parser.skip_whitespace
	ask _ = Parser.char '*'
	return Exile.Term.top
  }
}

Exile.HSyntax.parse.with_paren <w> (parser: (Parser w)) {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char '('
    ask v = parser
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char ')'
    return v
  }
}

Exile.HSyntax.parse.term (table: Exile.DepthTable) {
  Parser.first_of [
    (Exile.HSyntax.parse.with_paren (Exile.HSyntax.parse.term.apply table))
    (Exile.HSyntax.parse.term.container table ['@', 'λ'] (var_name => body => sub => term => sup => 
      (Exile.Term.attach (Exile.Term.lambda sub sup body) var_name)))
    (Exile.HSyntax.parse.term.container table ['@', 'λ'] (var_name => body => sub => term => sup => 
      (Exile.Term.attach (Exile.Term.infer_lambda body) var_name)))
    (Exile.HSyntax.parse.term.container table ['$', 'ξ'] (var_name => body => sub => term => sup => 
      (Exile.Term.attach (Exile.Term.self sub body) var_name)))
    (Exile.HSyntax.parse.term.container table ['&', '%', 'μ', 181] (var_name => body => sub => term => sup => 
      (Exile.Term.attach (Exile.Term.recursive sup body) var_name)))
    (Exile.HSyntax.parse.term.variable table)
    (Exile.HSyntax.parse.term.top table)
    (Exile.HSyntax.parse.with_paren (Exile.HSyntax.parse.term table))
  ]
}

Exile.HSyntax.parse.term_noparen (table: Exile.DepthTable) {
  Parser.first_of [
    (Exile.HSyntax.parse.term.apply table)
    (Exile.HSyntax.parse.term table)
  ]
}
Exile.HSyntax.parse_either (term: String): Either Exile.Term Parser.Error {
  Parser.run (Exile.HSyntax.parse.term (Exile.DepthTable.new)) term
}

Exile.HSyntax.parse (term: String): Exile.Term {
  let v = Exile.HSyntax.parse_either term
  match Either v {
    left => v.val
    right => let v = v.val; match Parser.Error v {
      new => Exile.Term.error
    }
  }
}
