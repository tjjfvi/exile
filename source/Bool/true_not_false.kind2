// Proof that Bool.true != Bool.false
// This can be used to build more complex proofs by a
Bool.true_not_false (e: (Equal Bool Bool.true Bool.false)) : Empty
Bool.true_not_false e = 
  // How this works: Equal.rewrite takes a predicate that changes a value into a
  // type. It returns the result of applying the predicate on the RHS but takes
  // in a value of the type of applying the predicate on the LHS This works on
  // the type-level because both types are meant to be equal, but when the
  // values are different (such as Bool.true and Bool.false) Equal.rewrite
  // returns inconstructible types at the type level, which we chose to be Empty
  // in this case.
	Equal.rewrite e (x => Bool.if Type x Unit Empty) Unit.new
