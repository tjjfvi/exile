Nat.add.assoc (a: Nat) (b: Nat) (c: Nat) : Equal (Nat.add a (Nat.add b c)) (Nat.add (Nat.add a b) c)
Nat.add.assoc Nat.zero b c = 
	// Base case. 
	// If a == 0, then (a + b) = b and a + (b + c) = (b + c).
	// Kind2 knows this because of the definition of addition.
	// So our goal is (b + c) == (b + c), and this is trivial to prove because of Equal.refl
	Equal.refl
Nat.add.assoc (Nat.succ a) b c = 
	// Proof by induction.
	// (Nat.add.assoc a b c) tells us that a + (b + c) = (a + b) + c
	// We want (a + 1) + (b + c) = ((a + 1) + b) + c
	// Thanks to the definition of addition, Kind2 takes the "+ 1" out of our goal and it turns into
	// (a + (b + c)) + 1 = ((a + b) + c) + 1
	// So now, we can simply apply "+ 1" (which is Nat.succ) on both sides
	// to reach our goal
	Equal.apply (x => Nat.succ x) (Nat.add.assoc a b c)
