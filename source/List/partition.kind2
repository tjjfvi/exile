// Separate elements of t list into two groups, based on t condition, preserving order
// The first is values that pass the condition, the second is values that don't pass
List.partition <t> (cond: t -> Bool) (xs: List t) : Pair (List t) (List t) {
  let id = Function.id (List t)
  List.partition.go cond xs id id
}

List.partition.go <t>
  (cond: t -> Bool)
  (xs: List t)
  (as: (List t) -> (List t))
  (bs: (List t) -> (List t))
: Pair (List t) (List t)

List.partition.go t cond (List.nil t_) as bs =
  Pair.new (as List.nil) (bs List.nil)

List.partition.go t cond (List.cons t_ x xs) as bs =
  if (cond x) {
    let as = (a => List.cons x (as a)) :: (List t) -> (List t)
    List.partition.go cond xs as bs
  } else {
    let bs = (b => List.cons x (bs b)) :: (List t) -> (List t)
    List.partition.go cond xs as bs
  }