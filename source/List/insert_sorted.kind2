// # Insert a new element to some ordered list and preserves the ordination
// - List.insert_sorted (a => b => Nat.gte a b) [1 3 4 5] 2 -> [1 2 3 4 5]
// - List.insert_sorted (a => b => Nat.gte (Pair.snd a) (Pair.snd b)) [(a 1) (b 10)] (c 4) -> [(a 1) (c 4) (b 10)]

List.insert_sorted <a> (cmp : a -> a -> Bool) (x : a) (xs : List a) : List a {
  let pair = List.split_at xs (Nat.half (List.length xs))
  let ls   = Pair.fst pair
  let ys   = Pair.snd pair
  List.insert_sorted.aux cmp x ls ys
}

List.insert_sorted.aux <a> (cmp : a -> a -> Bool) (x : a) (ls: List a) (ys: List a) : List a
List.insert_sorted.aux a cmp x (List.nil  la)       (List.nil  ya)       = List.pure x
List.insert_sorted.aux a cmp x (List.nil  la)       (List.cons ya yh yt) = if (cmp x yh) {[yh x]} else {[x yh]}
List.insert_sorted.aux a cmp x (List.cons la lh lt) (List.nil  ya)       = List.insert_sorted cmp x (List.cons la lh lt)
List.insert_sorted.aux a cmp x (List.cons la lh lt) (List.cons ya yh yt) =
  let ls = (List.cons la lh lt)
  let ys = (List.cons ya yh yt)
  if (cmp x yh) {
    List.concat ls (List.insert_sorted cmp x ys)
  } else {
    List.concat (List.insert_sorted cmp x ls) ys
  }