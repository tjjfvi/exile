Term: Type

// Real terms
Term.lam (type: Term) (body: TermBody): Term
Term.rec (body: TermBody): Term
Term.self (body: TermBody): Term
Term.apply (fn: Term) (argument: Term): Term

HVM.log <a: Type> <r: Type> (logged: a) (result: r) {
  result
}

Unit: Type
Unit.new: Unit

// Alias terms
Term.top: Term
// Term.top_as_rec { Term.rec top => (Term.lam Term.bot x => top) }

TermBody: Type
TermBody.new (idx: U60) (body: Term): TermBody
TermBody.replace (body: TermBody) (with: Term): Term
TermBody.discard_var (body: TermBody): Term
TermBody.clone_with (body: TermBody) (with: TermBody): TermBody
TermBody.clone (body: TermBody): TermBody { TermBody.clone_with body body } 

// Checker terms
Term.forall (id: U60): Term
Term.instance_bound (instance: Term) (type: Term): Term
Term.reduce (term: Term): Term
Term.var (id: U60): Term
Term.typeof_bound (instance: Term): Term
Term.error: Term
Term.attach <t> (term: Term) (data: t): Term

Term.is_not_error (term: Term): Bool
Term.is_not_error Term.error = Bool.false
Term.is_not_error a = Bool.true

Judgement: Type
Judgement.equal (l: Term) (r: Term): Judgement
Judgement.reduce (term: Term): Judgement
Judgement.show (term: Judgement): String

TracebackEntry: Type
TracebackEntry.comment (comment: String): TracebackEntry
TracebackEntry.judgement (j: Judgement): TracebackEntry
TracebackEntry.show (tree: TracebackEntry): String

TracebackTree: Type
TracebackTree.leaf (term: Term): TracebackTree
TracebackTree.entry (entry: TracebackEntry) (child: TracebackTree): TracebackTree
TracebackTree.and (l: TracebackTree) (r: TracebackTree): TracebackTree
TracebackTree.or (l: TracebackTree) (r: TracebackTree): TracebackTree
TracebackTree.show (tree: TracebackTree): String

CheckResult: Type
CheckResult.new (term: Term) (tb: TracebackTree): CheckResult
CheckResult.with_comment (result: CheckResult) (comment: String): CheckResult
CheckResult.with_entry (result: CheckResult) (entry: TracebackEntry): CheckResult
CheckResult.with_reduce (result: CheckResult) (reduce: Term): CheckResult
CheckResult.with_equal (result: CheckResult) (l: Term) (r: Term): CheckResult
CheckResult.get_term (result: CheckResult): Term
CheckResult.show (result: CheckResult): String

Checker: Type
Checker.empty: Checker

Checker.reduce (checker: Checker) (term: Term): CheckResult
Checker.equal (checker: Checker) (l: Term) (r: Term): CheckResult
Checker.get_depth (checker: Checker): U60
Checker.new_forall <t> (checker: Checker) (cont: Checker -> Term -> t): t

Util.is_equal (l: Term) (r: Term): Bool {
	Term.is_not_error (CheckResult.get_term (Checker.equal Checker.empty l r))
}

Bool: Type
Bool.true: Bool
Bool.false: Bool
Bool.if <p> (a: Bool) (t: p) (f: p): p
Bool.if p Bool.true t f = t
Bool.if p Bool.false t f = f
U60.if <p> (a: U60) (t: p) (f: p): p
U60.if p 0 t f = f
U60.if p x t f = t
Bool.and (a: Bool) (b: Bool) { Bool.if a b Bool.false } 
Bool.or (a: Bool) (b: Bool) { Bool.if a Bool.true b }
U60.to_string (n: U60): String
U60.to_string n = (U60.if
	(< n 10)
	(String.cons (+ '0' n) String.nil)
	(String.concat (U60.to_string (/ n 10)) (String.cons (+ '0' (% n 10)) String.nil))
)
Bool.to_string (a: Bool): String
Bool.to_string Bool.true = "Bool.true"
Bool.to_string Bool.false = "Bool.false"
String.newline { String.cons 10 String.nil }


String: Type
String.cons (a: U60) (b: String): String
String.nil: String

List <t>: Type
List.cons <t> (a: t) (b: List t): List t
List.nil <t>: List t

List.append <t> (list: List t) (item: t): List t
List.append t List.nil item = List.cons item List.nil
List.append t (List.cons head tail) item = List.cons head (List.append t tail item)

List.len <t> (list: List t): U60
List.len t List.nil = 0
List.len t (List.cons _ l) = (+ (List.len l) 1)


String.concat (a: String) (b: String): String
String.concat (String.cons a b) c = (String.cons a (String.concat b c))
String.concat String.nil c = c

String.flatten (a: List String): String
String.flatten (List.cons a (List.cons b c)) = (String.flatten (List.cons (String.concat a b) c))
String.flatten (List.cons a List.nil) = a
String.flatten List.nil = ""

Term.show (st: Checker) (term: Term): String
Term.show st (Term.lam type body) = 
	let type_s = (Term.show st type)
	let var = String.flatten [ "x" (U60.to_string (Checker.get_depth st)) ]
	Checker.new_forall st st => x =>
	let x = (Term.attach x var)
	(Bool.if
		(Util.is_equal type Term.top)
		(String.flatten [
			"λ"
			var
			" "
			(Term.show st (TermBody.replace body x))
		])
		(String.flatten [
			"λ("
			var
			": "
			type_s
			") "
			(Term.show st (TermBody.replace body x))
		])
	)

Term.show st (Term.rec body) = 
	let var = String.flatten [ "x" (U60.to_string (Checker.get_depth st)) ]
	Checker.new_forall st st => x =>
	let x = (Term.attach x var)
	String.flatten [
		"µ"
		var
		" "
		(Term.show st (TermBody.replace body x))
	]
	
Term.show st (Term.self body) = 
	let var = String.flatten [ "x" (U60.to_string (Checker.get_depth st)) ]
	Checker.new_forall st st => x =>
	let x = (Term.attach x var)
	String.flatten [
		"ξ"
		var
		" "
		(Term.show st (TermBody.replace body x))
	]

Term.show st (Term.attach String (Term.forall a) s) = s
Term.show st Term.top = "*"
Term.show st Term.error = "!"
Term.show st (Term.apply a b) = String.flatten [
	"("
	(Term.show st a)
	" "
	(Term.show st b)
	")"
]
Term.show st (Term.forall uid) = String.flatten [
	"any" (U60.to_string uid)
]
Term.show st (Term.instance_bound term type) = String.flatten [
	(Term.show st term) " :: " (Term.show st type)
]
Term.show st (Term.typeof_bound term) = String.flatten [
	"typeof " (Term.show st term)
]


Program: Term
// CheckProgram: Checker.Result Unit

Main {
	 0 //(Checker.Result.to_string CheckProgram)
}
